plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}

repositories {
	mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
	//implementation "org.slf4j:slf4j-api:${slf4jVersion}"
	implementation "org.apache.httpcomponents.client5:httpclient5:${httpClientVersion}"
	implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

	// Tests
	//testImplementation("org.slf4j:slf4j-simple:${slf4jVersion}")
	testImplementation(platform("org.junit:junit-bom:5.7.1"))
	testImplementation("org.junit.jupiter:junit-jupiter")
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			pom {
				name = 'JOpenCage'
				description = 'Java Client for the OpenCage REST API'
				url = 'https://github.com/moberwasserlechner/jopencage'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'moberwasserlechner'
						name = 'Michael Oberwasserlechner'
						email = 'm.oberwasserlechner@byteowls.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/moberwasserlechner/jopencage.git'
					developerConnection = 'scm:git:ssh://github.com/moberwasserlechner/jopencage.git'
					url = 'https://github.com/moberwasserlechner/jopencage'
				}
			}
		}
	}
	repositories {
		maven {
			// change URLs to point to your repos, e.g. http://my.org/repo
			def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = project.findProperty("MAVEN_CENTRAL_USERNAME") ?: System.getenv("MAVEN_CENTRAL_USERNAME")
				password = project.findProperty("MAVEN_CENTRAL_PASSWORD") ?: System.getenv("MAVEN_CENTRAL_PASSWORD")
			}
		}
	}
}

signing {
	def signingKeyId = (String) project.findProperty("MAVEN_SIGNING_KEY_ID") ?: System.getenv("MAVEN_SIGNING_KEY_ID")
	def signingKey = (String) project.findProperty("MAVEN_SIGNING_KEY") ?: System.getenv("MAVEN_SIGNING_KEY")
	def signingPassword = (String) project.findProperty("MAVEN_SIGNING_PASSWORD") ?: System.getenv("MAVEN_SIGNING_PASSWORD")
	useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
	sign publishing.publications.mavenJava
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

test {
	useJUnitPlatform()
	systemProperties = System.properties
}
