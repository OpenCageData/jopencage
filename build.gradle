plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}

repositories {
	mavenCentral()
}

dependencies {
	
	implementation "org.apache.httpcomponents.client5:httpclient5:${httpClientVersion}"
	implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

	// Tests
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation platform("org.junit:junit-bom:${junitVersion}")
	testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
	
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j2-impl
	testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: "${slf4j2Version}"
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	withJavadocJar()
	withSourcesJar()
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

test {
	useJUnitPlatform()
	systemProperties = System.properties
}

jar {
	manifest {
		attributes(
			'Specification-Title': 'Java Client for the OpenCage REST API',
			'Specification-Vendor': 'OpenCage GmbH',
			'Specification-Version': archiveVersion,
			'Implementation-Title': 'Java Client for the OpenCage REST API',
			'Implementation-Vendor': 'OpenCage GmbH',
			'Implementation-Version': archiveVersion,
		)
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				name = 'JOpenCage'
				description = 'Java Client for the OpenCage REST API'
				url = 'https://github.com/opencagedata/jopencage'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'OpenCageData'
						name = 'OpenCage Data'
						email = 'support@opencagedata.com'
						organizationUrl = 'https://opencagedata.com'
						roles = [ 'maintainer' ]
					}
				}
				contributors {
					contributor {
						id = 'moberwasserlechner'
						name = 'Michael Oberwasserlechner'
						email = 'm.oberwasserlechner@byteowls.com'
						roles = [ 'former maintainer']
					}
				}
				scm {
					connection = 'scm:git:git://github.com/opencagedata/jopencage.git'
					developerConnection = 'scm:git:ssh://github.com/opencagedata/jopencage.git'
					url = 'https://github.com/opencagedata/jopencage'
				}
			}
		}
	}
	repositories {
		maven {
			// change URLs to point to your repos, e.g. http://my.org/repo
			def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = project.findProperty("MAVEN_USERNAME") ?: System.getenv("MAVEN_USERNAME")
				password = project.findProperty("MAVEN_PASSWORD") ?: System.getenv("MAVEN_PASSWORD")
			}
		}
	}
}

signing {
	// def signingKeyId = (String) project.findProperty("OSSRH_GPG_SIGNING_KEY_ID") ?: System.getenv("OSSRH_GPG_SIGNING_KEY_ID")
	// def signingKey = (String) project.findProperty("OSSRH_GPG_SECRET_KEY") ?: System.getenv("OSSRH_GPG_SECRET_KEY")
	// def signingPassword = (String) project.findProperty("OSSRH_GPG_SECRET_KEY_PASSWORD") ?: System.getenv("OSSRH_GPG_SECRET_KEY_PASSWORD")
	// useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
	sign publishing.publications.mavenJava
}

